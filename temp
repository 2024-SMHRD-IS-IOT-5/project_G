#include <ESP32Servo.h>
#include <LiquidCrystal.h>
#include "DHT.h"
#include <WiFi.h>
#include <HTTPClient.h>

// DHT 센서 설정
#define DHTPIN 13
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// LCD 핀 설정
const int rs = 14, en = 12, d4 = 5, d5 = 23, d6 = 19, d7 = 18;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// 서보 모터 설정
Servo doorServo1;  // 첫 번째 서보 모터 (핀 27)
Servo doorServo2;  // 두 번째 서보 모터 (핀 16)
const int servoPin1 = 27;
const int servoPin2 = 16;

// 팬 제어 (L9110 모터 드라이버) 설정
const int motorIn1 = 25;
const int motorIn2 = 17;

// Wi-Fi 정보 설정
const char* ssid = "AICAM_301B";
const char* password = "a123456789";

// 서버 URL
const char* serverUrl = "http://192.168.219.52:8000/insert/else";

// 온도 임계값
const float openWindowTemperature = 24.0;  // 창문을 여는 온도
const float closeWindowTemperature = 22.5; // 창문을 닫는 온도
const float fanStartTemperature = 25.0;    // 팬 시작 온도
const float fanStopTemperature = 24.0;     // 팬 정지 온도

unsigned long lastReadTime = 0;    // 마지막 센서 읽기 시간
unsigned long lastHttpUpdate = 0;  // 마지막 HTTP 전송 시간
const unsigned long interval = 2000;       // 2초 간격
const unsigned long HTTP_INTERVAL = 30000; // 30초 간격

bool windowOpened = false;         // 창문 상태 플래그
bool motorActive = false;          // 팬 상태 플래그
bool fanActive = false;            // 팬 작동 상태 플래그

void setup() {
  lcd.begin(16, 2);            // LCD 초기화
  lcd.print("Initializing..."); // 초기 메시지
  dht.begin();                 // DHT 센서 초기화

  // 서보모터 핀 설정
  doorServo1.attach(servoPin1); // 핀 27
  doorServo2.attach(servoPin2); // 핀 16
  doorServo1.write(0);          // 초기 상태: 창문 닫음
  doorServo2.write(0);

  // 팬 제어 핀 설정
  pinMode(motorIn1, OUTPUT);
  pinMode(motorIn2, OUTPUT);
  digitalWrite(motorIn1, LOW);
  digitalWrite(motorIn2, LOW);

  Serial.begin(9600);          // 시리얼 통신 시작

  // Wi-Fi 연결
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  lcd.clear();
  lcd.print("WiFi Connected");
  delay(2000);                 // 안정화를 위한 지연
}

void sendHttpRequest(float temperature, float humidity, bool fanStatus) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    // 팬 상태에 따라 전력 값 설정
    int fanPower = fanStatus ? 9000 : 0;

    // JSON 데이터 생성
    String postData = "{\"indoor_temp\": " + String(temperature, 1)+ ", \"indoor_humid\": " + String(humidity, 1)+ ", \"fan_power\": " + String(fanPower) + "}";
    Serial.println("POST Data: " + postData);

    // HTTP POST 요청
    int httpResponseCode = http.POST(postData);
    if (httpResponseCode > 0) {
      Serial.printf("HTTP Response: %d\n", httpResponseCode);
    } else {
      Serial.println("HTTP Request Failed");
    }
    http.end();
  } else {
    Serial.println("Wi-Fi 연결 끊김");
  }
}

void loop() {
  unsigned long currentTime = millis();

  // 1초마다 DHT 센서 읽기
  if (currentTime - lastReadTime >= interval) {
    lastReadTime = currentTime;

    float h = dht.readHumidity();
    float t = dht.readTemperature();

    // 센서 오류가 발생한 경우
    if (isnan(h) || isnan(t)) {
      lcd.clear();
      lcd.print("DHT error");
      Serial.println("DHT sensor error!");
      return;
    }

    // LCD 업데이트
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("H: ");
    lcd.print(h);
    lcd.print("%");
    lcd.setCursor(0, 1);
    lcd.print("T: ");
    lcd.print(t);
    lcd.print("C");

    // 시리얼 출력
    Serial.print("Humidity: ");
    Serial.print(h);
    Serial.print("%, Temperature: ");
    Serial.print(t);
    Serial.println("C");

    // 서보 모터 제어 (창문 열기/닫기)
    if (t >= openWindowTemperature && !windowOpened) {
      doorServo1.write(80);
      doorServo2.write(80); // 두 모터 함께 창문 열기
      windowOpened = true;
      Serial.println("Window Opened");
    } else if (t <= closeWindowTemperature && windowOpened) {
      doorServo1.write(0);
      doorServo2.write(0); // 두 모터 함께 창문 닫기
      windowOpened = false;
      Serial.println("Window Closed");
    }

    // 팬 제어 (히스테리시스 적용)
    if (t >= fanStartTemperature && !motorActive) {
      digitalWrite(motorIn1, HIGH);
      digitalWrite(motorIn2, LOW);
      motorActive = true;
      fanActive = true; // 팬 작동 상태 활성화
      Serial.println("Fan Activated");
    } else if (t <= fanStopTemperature && motorActive) {
      digitalWrite(motorIn1, LOW);
      digitalWrite(motorIn2, LOW);
      motorActive = false;
      fanActive = false; // 팬 작동 상태 비활성화
      Serial.println("Fan Stopped");
    }

    // HTTP 요청 (30초마다 전송)
    if (currentTime - lastHttpUpdate >= HTTP_INTERVAL) {
      lastHttpUpdate = currentTime;
      sendHttpRequest(t, h, fanActive);
    }
  }
}
