#include <WiFi.h>
#include <WebServer.h>
#include <HTTPClient.h>

// Wi-Fi 정보 설정
const char* ssid = "AICAM_301B";
const char* password = "a123456789";

// 서버 URL (Node.js 서버의 IP 주소와 포트)
const char* serverUrl = "http://192.168.219.52:8000/insert/led";

// 웹 서버 포트 설정
WebServer server(80);

// 센서 및 LED 핀 설정
#define LED_BTN 26

#define LED_PIN1 16
#define LED_PIN2 17
#define LED_PIN3 18
#define LED_PIN4 19
#define LED_PIN5 13
#define LED_PIN6 12

#define Cds_PIN1 35
#define Cds_PIN2 34

#define PIR_PIN1 27
#define PIR_PIN2 14

bool isLEDOn = false;
bool buttonPressed = false;

unsigned long lastPIRUpdate = 0; 
unsigned long lastSensorUpdate = 0;
unsigned long lastHttpUpdate = 0;

const unsigned long PIR_INTERVAL = 1000;
const unsigned long SENSOR_INTERVAL = 30000;
const unsigned long HTTP_INTERVAL = 30000;

const float POWER_MULTIPLIER = 5.5;

float led_power = 0.0;
int bright1 = 0;
int bright2 = 0;

void handleControlLed() {
  if (server.hasArg("plain")) {  // 요청에 본문이 있는지 확인
    String body = server.arg("plain");
    Serial.println("Received body: " + body);

    // 요청 본문에서 LED 상태 추출
    if (body.indexOf("\"state\":\"on\"") != -1) {
      digitalWrite(LED_PIN1, HIGH);
      digitalWrite(LED_PIN2, HIGH);
      isLEDOn = true;
      server.send(200, "application/json", "{\"status\":\"LED turned ON\"}");
    } else if (body.indexOf("\"state\":\"off\"") != -1) {
      digitalWrite(LED_PIN1, LOW);
      digitalWrite(LED_PIN2, LOW);
      isLEDOn = false;
      server.send(200, "application/json", "{\"status\":\"LED turned OFF\"}");
    } else {
      server.send(400, "application/json", "{\"error\":\"Invalid state value\"}");
    }
  } else {
    server.send(400, "application/json", "{\"error\":\"No body in request\"}");
  }
}

void handleRoot() {
  String response = "ESP32 Web Server Running\n";
  response += "LED Status: ";
  response += isLEDOn ? "ON" : "OFF";
  server.send(200, "text/plain", response);
}

void setup() {
  Serial.begin(115200);

  // Wi-Fi 연결
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");

  // 웹 서버 설정
  server.on("/", handleRoot);
  server.on("/data/led", HTTP_POST, handleControlLed);  // LED 제어 엔드포인트
  server.begin();
  Serial.println("Web server started");

  // 핀 모드 설정
  pinMode(LED_BTN, INPUT);
  pinMode(LED_PIN1, OUTPUT);
  pinMode(LED_PIN2, OUTPUT);
  pinMode(Cds_PIN1, INPUT);  // 조도센서
  pinMode(Cds_PIN2, INPUT);  // 조도센서

  pinMode(PIR_PIN1, INPUT);  // 동작센서
  pinMode(PIR_PIN2, INPUT);  // 동작센서

  ledcAttach(LED_PIN3, 5000, 8);
  ledcAttach(LED_PIN4, 5000, 8);

  pinMode(LED_PIN5, OUTPUT);
  pinMode(LED_PIN6, OUTPUT);
  digitalWrite(LED_PIN3, LOW);
  digitalWrite(LED_PIN4, LOW);

  // Task 생성
  xTaskCreate([](void* param) {
    for (;;) {
      sendHttpRequest();
      vTaskDelay(pdMS_TO_TICKS(HTTP_INTERVAL));  // RTOS-friendly delay
    }
  },
              "HttpRequestTask", 4096, NULL, 1, NULL);
}

void loop() {

  unsigned long currentMillis = millis();

  // 버튼 상태 읽기 및 LED 제어
  int buttonState = digitalRead(LED_BTN);
  if (buttonState == HIGH && !buttonPressed) {
    isLEDOn = !isLEDOn;
    buttonPressed = true;
    digitalWrite(LED_PIN1, isLEDOn ? HIGH : LOW);
    digitalWrite(LED_PIN2, isLEDOn ? HIGH : LOW);
  } else if (buttonState == LOW) {
    buttonPressed = false;
  }

  // 조도 센서 값 읽기
  int CdsValue1 = analogRead(Cds_PIN1);
  int CdsValue2 = analogRead(Cds_PIN2);

  bright1 = map(CdsValue1, 0, 4095, 255, 0);
  bright2 = map(CdsValue2, 0, 4095, 255, 0);

  led_power = (CdsValue1 < 1000) ? random(40, 51) / 10.0 : (CdsValue1 < 2000) ? random(30, 41) / 10.0
                                                                              : random(15, 31) / 10.0;

  if (isLEDOn) {
    digitalWrite(LED_PIN1, HIGH);
    digitalWrite(LED_PIN2, HIGH);
    ledcWrite(LED_PIN3, bright1);
    ledcWrite(LED_PIN4, bright2);
  } else {
    digitalWrite(LED_PIN1, LOW);
    digitalWrite(LED_PIN2, LOW);
    ledcWrite(LED_PIN3, 0);
    ledcWrite(LED_PIN4, 0);
  }

  if (currentMillis - lastPIRUpdate >= PIR_INTERVAL) {
    lastPIRUpdate = currentMillis;

    int PIRState1 = digitalRead(PIR_PIN1);
    int PIRState2 = digitalRead(PIR_PIN2);

    // 동작 센서 처리
    if (PIRState1 == HIGH) {
      digitalWrite(LED_PIN5, HIGH);
    } else {
      digitalWrite(LED_PIN5, LOW);
    }

    if (PIRState2 == HIGH) {
      digitalWrite(LED_PIN6, HIGH);
    } else {
      digitalWrite(LED_PIN6, LOW);
    }
  }

  // 센서 데이터 출력
  if (currentMillis - lastSensorUpdate >= SENSOR_INTERVAL) {
    lastSensorUpdate = currentMillis;

    Serial.print("LED 상태: ");
    Serial.print(isLEDOn ? "ON" : "OFF");
    Serial.print(" | 조도 센서 1 값: ");
    Serial.print(CdsValue1);
    Serial.print(" | 조도 센서 2 값: ");
    Serial.print(CdsValue2);
    Serial.print(" | 전력 값: ");
    Serial.print(led_power);
    Serial.println("mW");
  }

  // 웹 서버 요청 처리
  server.handleClient();
}

void sendHttpRequest() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);

    http.addHeader("Content-Type", "application/json");

    // 전송할 JSON 데이터 생성
    String postData = "{\"led_power\": " + String(led_power * POWER_MULTIPLIER, 2) + "}";
    Serial.print("전송할 데이터: ");
    Serial.println(postData);

    // HTTP POST 요청
    int httpResponseCode = http.POST(postData);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.printf("HTTP Response Code: %d\n", httpResponseCode);
      Serial.println("Response: " + response);
    } else {
      Serial.printf("Error sending POST request: %s\n", http.errorToString(httpResponseCode).c_str());
    }

    http.end();
  } else {
    Serial.println("Wi-Fi 연결 끊김");
  }
}
