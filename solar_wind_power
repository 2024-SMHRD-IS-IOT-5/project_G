#include <WiFi.h>
#include <WebServer.h>
#include <HTTPClient.h>
#include <LiquidCrystal.h>

// Wi-Fi 설정
const char* ssid = "AICAM_301B";
const char* password = "a123456789";
const char* serverUrl = "http://192.168.219.52:8000/insert/renew";

// 웹 서버 설정
WebServer server(80);

// LCD 설정
const int rs = 14, en = 12, d4 = 5, d5 = 23, d6 = 19, d7 = 18;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// 센서 핀 설정
#define SOLAR_PIN 36
#define WIND_PIN 34
float solarVoltage = 0.0, windVoltage = 0.0;

// 사용자 정의 문자: 블록 문자
byte blockChar[8] = {
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111
};

// 타이머 설정
unsigned long lastSensorUpdate = 0;
const unsigned long SENSOR_INTERVAL = 30000;

void setup() {
  Serial.begin(115200);

  // LCD 초기화
  lcd.begin(16, 2);
  lcd.createChar(0, blockChar); // 사용자 정의 문자 등록
  lcd.clear();
  lcd.print("Initializing...");
  delay(1000);

  // Wi-Fi 연결
  lcd.clear();
  lcd.print("WiFi Connecting");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");

  lcd.clear();
  lcd.print("WiFi Connected!");
  delay(1000);

  // 초기 LCD 메시지 설정
  lcd.clear();
  lcd.print("solar: ");
  lcd.setCursor(0, 1);
  lcd.print("wind:  ");

  // 웹 서버 설정
  server.on("/", handleRoot);
  server.begin();
  Serial.println("Web server started");
}

void loop() {
  // 센서 데이터 읽기 및 LCD 업데이트
  readSensorData();
  updateLCDWithAnimation();

  // 30초마다 데이터 전송
  unsigned long currentMillis = millis();
  if (currentMillis - lastSensorUpdate >= SENSOR_INTERVAL) {
    lastSensorUpdate = currentMillis;
    sendHttpRequest();
  }

  // 웹 서버 요청 처리
  server.handleClient();

  delay(500); // 루프 속도 조절
}

void readSensorData() {
  int windValue = analogRead(WIND_PIN);
  windVoltage = windValue * (5.0 / 4095.0);

  if (windVoltage >= 1.0) {
    solarVoltage = 0.0;
  } else {
    int solarValue = analogRead(SOLAR_PIN);
    solarVoltage = solarValue * (5.0 / 4095.0);
  }

  Serial.print("태양광 전압: ");
  Serial.print(solarVoltage, 2);
  Serial.print(" V | 풍력 전압: ");
  Serial.println(windVoltage, 2);
}

void updateLCDWithAnimation() {
  // LCD에 충전 애니메이션 표시
  int solarBlocks = map(solarVoltage * 100, 0, 500, 0, 10); // 블록 수 계산
  int windBlocks = map(windVoltage * 100, 0, 500, 0, 10);

  lcd.setCursor(7, 0);
  for (int i = 0; i < 10; i++) {
    lcd.setCursor(7 + i, 0);
    if (i < solarBlocks) {
      lcd.write((byte)0); // 블록 문자 출력
    } else {
      lcd.print(" "); // 빈 칸 출력
    }
  }

  lcd.setCursor(7, 1);
  for (int i = 0; i < 10; i++) {
    lcd.setCursor(7 + i, 1);
    if (i < windBlocks) {
      lcd.write((byte)0); // 블록 문자 출력
    } else {
      lcd.print(" "); // 빈 칸 출력
    }
  }
}

void sendHttpRequest() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    String postData = "{\"solar_power\": " + String(solarVoltage, 2) + ",";
    postData += "\"wind_power\": " + String(windVoltage, 2) + "}";

    Serial.print("전송할 데이터: ");
    Serial.println(postData);

    int httpResponseCode = http.POST(postData);
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.printf("HTTP Response Code: %d\n", httpResponseCode);
      Serial.println("Response: " + response);
    } else {
      Serial.printf("Error: %s\n", http.errorToString(httpResponseCode).c_str());
    }
    http.end();
  } else {
    Serial.println("Wi-Fi 연결 끊김");
  }
}

void handleRoot() {
  String response = "ESP32 Web Server Running\n";
  response += "solar_power: " + String(solarVoltage, 2) + " V\n";
  response += "wind_power: " + String(windVoltage, 2) + " V\n";
  server.send(200, "text/plain", response);
}
